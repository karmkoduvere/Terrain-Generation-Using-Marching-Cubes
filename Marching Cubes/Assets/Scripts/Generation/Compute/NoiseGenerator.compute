// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "SimplexNoise3D.hlsl"
#include "ClassicNoise2D.hlsl"

float noiseFrequency;
int octaves;
float weightMultiplier;

float noiseWeight;
float floorOffset;

float hardFloor;
float hardFloorWeight;

float offsetNoiseFrequency;
int offsetOctaves;
float offsetWeight;

float3 noiseOffset;

int noiseGenerator;
int offsetNoiseGenerator;

RWStructuredBuffer<float> noisePoints;
float3 offset;
float3 worldSize;
int chunkSize;

uint Index(uint3 id);
float SimplePerlinTerrain(uint3 id);
float Simplex3D(uint3 id);
float SimplexTerrain(uint3 id, float offsetNoise);
float PerlinTerrain(uint3 id, float offsetNoise);
float PerlinTerrain2(uint3 id, float offsetNoise);
float OffsetNoise(uint3 id);
float OffsetNoise2(uint3 pos);

[numthreads(4,4,4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
    if (id.x < 0 || id.y < 0 || id.z < 0 ||
        id.x > chunkSize || id.y > chunkSize || id.z > chunkSize)
        return;
    
    if (id.z + offset.z == 0 || id.y + offset.y == 0 || id.x + offset.x == 0 ||
                        id.z + offset.z == worldSize.z * chunkSize ||
                        id.y + offset.y == worldSize.y * chunkSize ||
                        id.x + offset.x == worldSize.x * chunkSize)
    {
        noisePoints[Index(id)] = 0.0f;
        return;
    }
    
    float noise = 1.0f;
    float offsetNoise = 0.0f;
    if (offsetNoiseGenerator == 0)
        offsetNoise = OffsetNoise(id + offset);
    else if(offsetNoiseGenerator == 1)
        offsetNoise = OffsetNoise2(id + offset);
    
    if (noiseGenerator == 0)
        noise = Simplex3D(id + offset);
    else if (noiseGenerator == 1)
        noise = SimplePerlinTerrain(id + offset);
    else if (noiseGenerator == 2)
        noise = SimplexTerrain(id + offset, offsetNoise);
    else if (noiseGenerator == 3)
        noise = PerlinTerrain(id + offset, offsetNoise);
    else if (noiseGenerator == 4)
        noise = PerlinTerrain2(id + offset, offsetNoise);
    
    noisePoints[Index(id)] = noise; 
}

uint Index(uint3 id)
{
    uint size = chunkSize + 1;
    return id.x + id.y * size + id.z * pow(size, 2);
}

float SimplePerlinTerrain(uint3 pos)
{
    float ground = 10; // ground plane
    float frequency = noiseFrequency; // how quickly the noise varies over space
    float amplitude = 1; // strength of the noise
    
    int weight = 10;

    float density = 0;

    for (int i = 0; i < octaves; i++)
    {
        density += cnoise(pos.xz * frequency) * amplitude;
        frequency *= 2;
        frequency -= 0.01f;
        amplitude *= 0.5f;
    }
    
    float finalVal = -(pos.y - floorOffset) + density * noiseWeight; 
    
    if (pos.y < hardFloor)
    {
        finalVal += hardFloorWeight;
    }
    
    return finalVal;
}

float Simplex3D(uint3 id)
{
    float noise = (snoise(id * noiseFrequency + noiseOffset) * 2 - 1);

    return noise * noiseWeight;
}

float SimplexTerrain(uint3 pos, float offsetNoise)
{
    float noise = 0;

    float frequency = noiseFrequency;
    float amplitude = 1;
    float weight = 1;
    for (int j = 0; j < octaves; j++)
    {
        float n = snoise((pos + offsetNoise) * frequency + noiseOffset);
        float v = 1 - abs(n);
        v = v * v;
        v *= weight;
        weight = max(min(v * weightMultiplier, 1), 0);
        noise += v * amplitude;
        frequency *= 2;
        frequency -= 0.01f;
        amplitude *= 0.5f;
    }
    
    float finalVal = -(pos.y - floorOffset) + noise * noiseWeight;
    
    if (pos.y < hardFloor)
    {
        finalVal += hardFloorWeight;
    }
    
    return finalVal;
}

float PerlinTerrain(uint3 pos, float offsetNoise)
{
    float noise = 0;

    float frequency = noiseFrequency;
    float amplitude = 1;
    float weight = 1;
    for (int j = 0; j < octaves; j++)
    {
        float n = cnoise((pos.xz + offsetNoise) * frequency + noiseOffset.xz);
        float v = 1 - abs(n);
        v = v * v;
        v *= weight;
        weight = max(min(v * weightMultiplier, 1), 0);
        noise += v * amplitude;
        frequency *= 2;
        frequency -= 0.01f;
        amplitude *= 0.5f;
    }
    
    float finalVal = -(pos.y - floorOffset) + noise * noiseWeight; 
    
    if (pos.y < hardFloor)
    {
        finalVal += hardFloorWeight;
    }
    
    return finalVal;
}

float PerlinTerrain2(uint3 pos, float offsetNoise)
{
    float noise = 0;

    float frequency = noiseFrequency;
    float amplitude = 1;
    float weight = 1;
    for (int el = 0; el < octaves; el++)
    {
        float n = cnoise((pos.xz + offsetNoise) * frequency + noiseOffset.xz);
        noise += n * amplitude;
        frequency *= 2;
        frequency -= 0.01f;
        amplitude *= 0.5f;
    }
    
    float finalVal = -(pos.y - floorOffset) + noise * noiseWeight; 
    
    if (pos.y < hardFloor)
    {
        finalVal += hardFloorWeight;
    }
    
    return finalVal;
}

float OffsetNoise(uint3 pos)
{
    float noise = 0;

    float frequency = offsetNoiseFrequency;
    float amplitude = 1;
    float weight = 1;
    
    for (int j = 0; j < offsetOctaves; j++)
    {
        float n = snoise(pos * frequency + noiseOffset);
        float v = 1 - abs(n);
        v = v * v;
        v *= weight;
        weight = max(min(v, 1), 0);
        noise += v * amplitude;
        frequency *= 2;
        frequency -= 0.01f;
        amplitude *= 0.5f;
    }
    
    return noise * offsetWeight;
}

float OffsetNoise2(uint3 pos)
{
    float noise = 0;

    float frequency = offsetNoiseFrequency;
    float amplitude = 1;
    float weight = 1;

    for (int j = 0; j < offsetOctaves; j++)
    {
        float n = snoise(pos * frequency + noiseOffset);
        noise += n * amplitude;
        frequency *= 2;
        frequency -= 0.01f;
        amplitude *= 0.5f;
    }
    
    return noise * offsetWeight;
}